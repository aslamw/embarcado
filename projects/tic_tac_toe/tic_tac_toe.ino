#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <stdio.h>
#include <Arduino.h>

// Inclua o cabeçalho necessário para o watchdog timer da tarefa
#include <esp_task_wdt.h>

// Defina o período de tempo limite do watchdog em milissegundos (ajuste conforme necessário)


//Define e configura display
#define OLED_RESET -1

#define BUTTON_LEFT 9
#define BUTTON_OK 10
#define BUTTON_RIGHT 11

Adafruit_SSD1306 display(OLED_RESET);

//------------------------------------------------------------------logo--------------------------------

const unsigned char logo1 [] PROGMEM = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0x00, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc3, 0xfc, 0x0f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 
0xf8, 0x7f, 0xff, 0xff, 0x99, 0xf8, 0x3f, 0xff, 0x87, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 
0xfb, 0x7f, 0xff, 0xff, 0x99, 0xf8, 0x7e, 0x1f, 0xc3, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 
0xff, 0x7f, 0xff, 0xff, 0x99, 0xf0, 0xfc, 0xc7, 0xe1, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 
0xfe, 0xff, 0xff, 0xff, 0x99, 0xe1, 0xfd, 0xe7, 0xe1, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 
0xf9, 0xff, 0xff, 0xff, 0x99, 0xe1, 0xff, 0xfd, 0xf0, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 
0xf8, 0x7f, 0xff, 0xff, 0xc3, 0xe1, 0xff, 0xf9, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xc3, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0x07, 0xf0, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xec, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xbf, 0xf0, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xe0, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xbf, 0xf0, 0xff, 0xe4, 0xff, 0xff, 0xff, 0xfc, 0xff, 
0xff, 0xfe, 0x1f, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xf0, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xf1, 0xff, 
0xff, 0xfc, 0xdf, 0xff, 0xff, 0xf0, 0xff, 0x1f, 0xe1, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xf7, 0xff, 
0xff, 0xfe, 0x9f, 0xff, 0xff, 0xf0, 0xff, 0x1f, 0xe1, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xfe, 0x1f, 0xff, 0xff, 0xf8, 0x7f, 0x9f, 0xc3, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xfc, 0xcf, 0xff, 0xc3, 0xfc, 0x1f, 0xff, 0x03, 0xff, 0xfc, 0xff, 0xff, 0xcf, 0xff, 0xff, 
0xff, 0xfc, 0xdf, 0xff, 0x03, 0xfc, 0x07, 0xfc, 0x01, 0xff, 0xfc, 0xff, 0xff, 0x87, 0xff, 0xff, 
0xff, 0xfe, 0x3f, 0xfe, 0x3f, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xfe, 0x6f, 0xff, 0x80, 0x00, 0x70, 0x7f, 0xff, 0xff, 0xff, 0x47, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xf0, 0x01, 0xf8, 0x3f, 0xff, 0xff, 0xfe, 0x47, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xfe, 0x31, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xfc, 0xc7, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xfe, 0x71, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xfe, 0x33, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


//---------------------------------------------------------------------------------------------



//-------------------------------------variaveis------------------------------------------------

int time_logo = 0;

int button_left, button_ok, button_right = HIGH;
int button_index = 0;

//------------------------------------funções-----------------------------------------------------

void logo_animation() {
  //logo
  for (int8_t i = 0; i<2; i++){
    display.clearDisplay();

    display.drawBitmap(0, 0, logo1, 128, 32, WHITE);

    display.display();
  }

  display.clearDisplay();
  delay(2000);

  display.setTextColor(WHITE);
  display.setCursor(30, 12); // Posiciona o cursor
  display.println("number game");

  display.display();

  delay(2000);
  
}
char* numberVar(int quantidade){
  int valor_escolhido;
  char numero[9];

  for (int i = 0; i < quantidade;i++){
    valor_escolhido = rand() % 10;

    numero[i] = valor_escolhido + '0';
  }

  numero[8] = '\0';

  return numero;
}
//----------------------------------------------------------------------


void setup() {
  //Inicializa I2c
  Wire.begin();

  // Inicializa Display no endereço 0x3c do I2C
 
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);

  pinMode(BUTTON_LEFT,INPUT_PULLUP);
  pinMode(BUTTON_OK, INPUT_PULLUP);
  pinMode(BUTTON_RIGHT, INPUT_PULLUP);

  Serial.begin(115200);

  // Inicia o watchdog timer (alimente-o pela primeira vez)
  esp_task_wdt_reset();

}

void loop() {
  logo_animation();

  Serial.print(numberVar(5));

  esp_task_wdt_reset();

}
